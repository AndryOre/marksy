// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  username     String     @id
  name         String
  avatarUrl    String?
  bannerUrl    String?
  instagram    String?
  linkedin     String?
  x            String?
  github       String?
  website      String?
  twitch       String?
  youtube      String?
  tiktok       String?
  bookmarks    Bookmark[]
  categories   Category[]
  tags         Tag[]
  dateCreated  DateTime   @default(now())
  dateModified DateTime   @updatedAt
}

model Bookmark {
  id           String        @id @default(uuid())
  title        String
  url          String
  description  String?
  imageUrl     String?
  category     Category      @relation(fields: [categoryId], references: [id])
  categoryId   String
  user         User          @relation(fields: [username], references: [username])
  username     String
  dateAdded    DateTime      @default(now())
  lastChecked  DateTime?
  isAvailable  Boolean?
  isPrivate    Boolean       @default(false)
  tags         Tag[]         @relation("BookmarkToTag")
  healthChecks HealthCheck[]

  @@index([categoryId])
  @@index([username])
}

model Category {
  id           String     @id @default(uuid())
  title        String
  bookmarks    Bookmark[]
  user         User       @relation(fields: [username], references: [username])
  username     String
  dateAdded    DateTime   @default(now())
  dateModified DateTime   @updatedAt

  @@index([username])
}

model Tag {
  id        String     @id @default(uuid())
  name      String     @unique
  color     String?
  user      User       @relation(fields: [username], references: [username])
  username  String
  dateAdded DateTime   @default(now())
  bookmarks Bookmark[] @relation("BookmarkToTag")

  @@index([username])
}

model HealthCheck {
  id           String   @id @default(uuid())
  bookmark     Bookmark @relation(fields: [bookmarkId], references: [id])
  bookmarkId   String
  timestamp    DateTime @default(now())
  status       Boolean
  statusCode   Int?
  responseTime Int?
  error        String?

  @@index([bookmarkId])
}
