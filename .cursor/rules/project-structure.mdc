---
description: Project structure and file organization guidelines
globs: 
alwaysApply: false
---
# Project Structure

## Main Structure

```tree
.
├── .cursor/          # Cursor IDE configuration
│   └── rules/        # Cursor rules for AI assistance
├── .husky/           # Git hooks
├── .next/            # Next.js build output
├── .vscode/          # VSCode configuration
├── prisma/           # Prisma schema and client
├── public/           # Static assets
├── src/              # Source code
│   ├── app/          # Next.js App Router
│   │   ├── api/      # API Routes
│   │   │   └── auth/ # Authentication API
│   │   │       └── [...all]/ # Auth.js routes
│   │   ├── auth/     # Auth pages
│   │   ├── dashboard/# Dashboard pages
│   │   ├── sign-in/  # Sign-in page
│   │   ├── layout.tsx# Root layout
│   │   ├── page.tsx  # Home page
│   │   └── globals.css# Global styles
│   ├── components/   # Reusable components
│   │   ├── ui/       # Shadcn UI components
│   │   ├── sign-in.tsx # Sign-in form component
│   │   ├── sign-up.tsx # Sign-up form component
│   │   ├── user.tsx  # User-related components
│   │   └── index.ts  # Component exports
│   ├── lib/          # Utility functions
│   │   ├── auth-client.ts # Client-side auth utilities
│   │   ├── email.ts  # Email-related utilities
│   │   ├── sign-in.ts # Sign-in utilities
│   │   ├── sign-up.ts # Sign-up utilities
│   │   └── utils.ts  # General utilities
│   ├── server/       # Server-side code
│   │   ├── auth.ts   # Server-side auth utilities
│   │   ├── db.ts     # Database utilities
│   │   └── server.ts # Server utilities
│   ├── env.js        # Environment variables
│   └── middleware.ts # Next.js middleware
├── .env              # Environment variables
├── .env.example      # Example environment variables
├── .gitignore        # Git ignore file
├── .lintstagedrc.js  # Lint-staged configuration
├── .prettierignore   # Prettier ignore file
├── commitlint.config.mjs # Commitlint configuration
├── components.json   # Shadcn UI configuration
├── eslint.config.mjs # ESLint configuration
├── next.config.ts    # Next.js configuration
├── next-env.d.ts     # Next.js types
├── package.json      # Project dependencies
├── pnpm-lock.yaml    # PNPM lock file
├── postcss.config.mjs # PostCSS configuration
├── README.md         # Project documentation
└── tsconfig.json     # TypeScript configuration
```

## File Naming and Organization

- Use kebab case for route directories (e.g., `api/hello-world/route`)
- Use PascalCase for components (e.g. `components/Button.tsx`)
- Shadcn components are in `components/ui`
- All other components are in `components/`
- Colocate files in the folder where they're used unless they can be used across the app
- If a component can be used in many places, place it in the `components` folder

## New Pages

- Create new pages at: `src/app/PAGE_NAME/page.tsx`
- Components for the page are either in `page.tsx` or in the `src/app/PAGE_NAME` folder
- Pages are Server components for direct data loading
- Components with `onClick` must be client components with `use client` directive
- Server action files must start with `use server`

## Utility Functions

- Create utility functions in `lib/` folder for reusable logic
